<%
    #
    # Following labels are used in the left pane in a User readable form.
    # NOTE: 
    #   - ipv4list will be created when user provides a ipv4 value in the form of IP1, IP2, IP3 ... (comma separated values)
    #   - Similarly portlist is created when user provides a csv value for "port"
    #
    objLabels = {
               "deviceclass" => {"label" => "Device Class", "icon" => "icon-tags" },
               "devicetype"  => {"label" => "Device Type",  "icon" => "icon-hdd" },
               "osname"      => {"label" => "Operating System", "icon" => "icon-flag" },
               "userrole"    => {"label" => "User Role", "icon" => "icon-star" },
               "username"    => {"label" => "User", "icon" => "icon-user" },
               "location"    => {"label" => "Location", "icon" => "icon-globe" },
               "ipv4"        => {"label" => "IP Address", "icon" => "icon-tasks"  }, 
               "ipv4subnet"  => {"label" => "IP Subnet", "icon" => "icon-calendar" },
               "port"        => {"label" => "Service", "icon" => "icon-screenshot" },
               "portrange"   => {"label" => "Service Group", "icon" => "icon-certificate" }
    }

    #
    # identifier of the wildcard = "ANY". This was copied from the policy DTD for object type="Any"
    #
    objANY = "any_obj"

%>

  <style type="text/css">

     .box {
        margin-top: 0px;
     }
     .placeholder-highlight  { 
        border: 1px solid #C4DCFB; 
        border-radius: 15px 15px 15px 15px;
        background: #C4F8FB 50% 50% repeat-x; 
        color: #363636; 
        box-shadow: 1px 2px 6px rgba(0, 0, 0, 0.5);
        margin:5px;
        padding: 5px 2px 2px 2px;
        text-align: center;
        display: block;
        width: 80%;
        font-size: 10pt;
        overflow: hidden;
     }

     #splitterContainer {
        /*background: #999;*/
        height:   95%;
        width:    90%;
        margin:   5px auto;
        padding: 0 0px;
        width:    100%;
        overflow: auto;
     }
     .pane {
        display:  none; /* will appear when layout inits */
     }

     #policyRuleHeader
     {
        font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif;
        margin: 0px;
        text-align: center;
        border-collapse: collapse;
     }

     #policyRuleHeader th
     {
        font-size: 13px;
        font-weight: bold;
        padding: 0px;
        background: #b9c9fe;
        border-top: 4px solid #aabcfe;
        border-bottom: 1px solid #fff;
        color: #039;
     }

     /* NEW */     
     li { list-style: none; padding-top: 0px;}

     #accordion .ui-accordion-content { padding: 0;}
     #accordion .ui-accordion-header { margin-top: 5px; font-family: Tahoma, Helvetica, sans-serif;}
     #accordion input {
        font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
     } 

     #accordion .objectList {
         overflow: hidden;
     }

     .objBtn {
        border-radius: 15px 15px 15px 15px;
        background: none repeat scroll 0 0 #E9EAEE;
        border: 2px solid #FFFFFF;
        box-shadow: 1px 2px 6px rgba(0, 0, 0, 0.5);
        margin:5px;
        padding: 5px 2px 2px 2px;
        text-align: center;
        display: block;
        width: 80%;
        font-size: 10pt;
        overflow: hidden;
     } 
     .objBtn > i {
        padding-right: 2%;
        float: left;
        border-right-style:dotted;
        border-right-width: 1px;
     } 

     .rule {
        min-height: 1em;
        width: 100%;
        border:1px inset white;
        overflow-x:auto;
        overflow-y:hidden;
        white-space: nowrap;
        padding-bottom: 2px;        
     }    

     .rule .handle {
        vertical-align: middle;
        display: inline-block;
        width: 5%;
     }

     .rule .references {
        vertical-align: top;
        display: inline-block;
        /*border: 1px inset white;*/
        font-size: 10pt;
        overflow: auto;
        width: 35%;
     }

     .rule .option {
        vertical-align: middle;
        display: inline-block;
        text-align: right;
        padding: 0px 5px 0px 5px;
        width: 5%;
        /*border: 1px inset white;*/
        /*font-size: 0pt;*/
     }

     .rule table
     {
        background: #e8edff; 
        width:100%;
        text-align: center;
        border-spacing:0;
        border-collapse: collapse;
     }

     .introjs-tooltip {
      font-family: Tahoma,"Helvetica Neue",Helvetica,Arial,sans-serif;
      font-size: 10pt;
      max-width: 75%;
     }

  </style>

<!-- context menus used for editing/deleting policy objects -->
<div class="contextMenu" id="objectMenu" style="display:none">
    <ul>
        <li id="edit"><i class="icon icon-color icon-edit"></i> Edit</li>
        <li id="delete"><i class="icon icon-color icon-close"></i> Delete</li>
    </ul>
</div>
<div class="contextMenu" id="objectRefMenu" style="display:none">
    <ul>
        <li id="qualify"><i class="icon icon-color icon-cancel"></i> Negate</li>
        <li id="delete"><i class="icon icon-color icon-close"></i> Delete</li>
    </ul>
</div>

<!-- policy editor page starts here -->
<div class="box span10" style="height:90%;">
    <div class="box-header well">
        <% if current_user.admin? %>
        <h2><i class="icon-edit"></i> Policy Editor
        </h2>
        <form id="policyForm" class="pull-right" action="/policy" method="POST">
            <fieldset>
                <input type="hidden" id="policy_json" name="policy_json" value="" />

                <a class="btn btn-primary" id="newRuleBtn" 
                    title="Creates a new rule and adds it as the topmost one." data-rel="tooltip"><i class="icon-pencil icon-white"></i> New Rule</a>
                <a class="btn" id="saveBtn" type="submit"><i class="icon-download-alt"></i> Save</a>
                <div style="width:20px; height:auto;display:inline-block;"></div>
                <a class="btn btn-primary" id='helpBtn' 
                    title="Policy Editor Help" data-rel="tooltip"> <i class="icon-info-sign icon-white"></i></a>
            </fieldset>
        </form>
        <% else %>
        <h2><i class="icon-edit"></i> Policy
        </h2>        
        <% end %>
    </div>

    <div id="splitterContainer" class="box-content">
        <div id="leftPane" class="pane ui-layout-west">
            <!-- template for a new accordion list item -->
            <li id="objectTemplate" class="object" style="display:none"><div class="objBtn"><i class="icon-star-empty"></i></div></li>          

            <div id="accordion">
                <% objLabels.keys.sort.each do | type | %>
                <h3 class="<%=type%>"><%= objLabels[type]["label"] %></h3>
                <div class="objectList">
                    <!-- controls for creating new object values -->
                    <button class="btn btn-mini btn-primary new-object-btn"><i class="icon-plus icon-white"></i> </button>
                    <input type="text" class="new-object-input-fld" style="display:none">

                    <ul class="objects">
                    <% if !(@fwObjects.nil? || @fwObjects.empty?) then
                          @fwObjects.keys.each do | key |
                             if (@fwObjects[key]["type"] == type) then 
                    %>
                        <li class="object"><div id="<%= key %>" class="objBtn">
                            <i class="<%= objLabels[type]["icon"] %>" ></i> <%= @fwObjects[key]["value"]  %>
                        </div></li>
                    <%       end #Objectref type matches current type %>
                    <%    end   #for each Objectref %>
                    <% end  #are there any objects for this type? %>
                    </ul>                
                </div>
                <% end # for each objectLabel... %>

            </div> <!-- accordion -->
        </div> <!-- leftPane -->

        <div id="rightPane" class="pane ui-layout-center">
            <div>
                <table id="policyRuleHeader" style="width:100%"><tr style="text-align: center">
                    <th style="width:5%"><!--handle--></th>
                    <th style="width:25%"> Source </th>
                    <th style="width:25%"> Destination </th>
                    <th style="width:5%"> Action </th>
                    <th style="width:5%"> Logging </th>
                    <th style="width:5%"> Delete </th>                             
                </tr></table>
            </div> 
            <!-- Rules start from here -->

            <!-- rule template (hidden) used for creating new rules -->
            <div class="rule" id="ruleTemplate" style="display:none"><table style="width:100%"><tr>
                <td class="handle"><i class="icon32 icon-pin"></i></td>
                <td class="sources references">
                    <li class="object"><div id="<%= objANY %>" class="objBtn">ANY</div></li>
                </td>
                <td class="destinations references">
                    <li class="object"><div id="<%= objANY %>" class="objBtn">ANY</div></li>
                </td>
                <td class="option accessToggler">
                    <h3 style="display:none">ALLOW</h3>
                    <h3>DENY</h3>
                </td>
                <td class="option loggingToggler">
                    <img class="icon32 icon-blue icon-check" style="display:none"></img>
                    <img class="icon32 icon-blue icon-remove"></img>
                </td>
                <td class="option"><span class="icon32 icon-color icon-close"></span></td>
            </tr></table></div>
            <!-- end of rule template -->

            <div id="ruleList" class="ui-layout-center">
                <% @fwRules.each do | fwRule | %>
                <div class="rule" id="<%= fwRule["id"] %>"><table><tr>
                    <td class="handle"><i class="icon32 icon-pin"></i></td>
                    <td class="sources references">
                        <%= render :partial => 'policy_rule_obj_refs', :locals  => { :objLabels => objLabels, :objANY => objANY,
                                                                                     :fwRule => fwRule, :targetList => "sources"
                                                                                   } %>
                    </td>
                    <td class="destinations references">
                        <%= render :partial => 'policy_rule_obj_refs', :locals  => { :objLabels => objLabels, :objANY => objANY,
                                                                                     :fwRule => fwRule, :targetList => "destinations"
                                                                                   } %>
                    </td>
                    <td class="option accessToggler">
                        <% if (fwRule["action"] == "allow") then %>
                            <h3>ALLOW</h3>
                            <h3 style="display:none">DENY</h3>
                        <% else %>
                            <h3 style="display:none">ALLOW</h3>
                            <h3>DENY</h3>
                        <% end %>                        
                    </td>
                    <td class="option loggingToggler">
                        <% if (fwRule["log"] == "true") then %>
                            <img class="icon32 icon-blue icon-check" ></img>
                            <img class="icon32 icon-blue icon-remove" style="display:none"></img>
                        <% else %>
                            <img class="icon32 icon-blue icon-check" style="display:none"></img>
                            <img class="icon32 icon-blue icon-remove"></img>
                        <% end %>                        
                    </td>
                    <td class="option"><span class="icon32 icon-color icon-close"></span></td>
                </tr></table></div>
                <% end #for each rule in the policy... %>
            </div> <!-- ruleList -->
        </div> <!-- rightPane -->
    </div> <!-- SplitterContainer -->
</div> <!-- main box -->


  <script type="text/javascript">

  //Decide when to save the document
  var bDirty = false;
  var oldObject = { id: "", text: ""};

  $(document).ready(function () {

     $('#accordion .object').draggable({
         helper: 'clone',
         appendTo: 'body',
         zIndex: 350,
         connectToSortable: '.references'
     }).disableSelection();

     $('#ruleList').sortable({
         items: '.rule',
         handle: '.handle',
         placeholder: 'placeholder-highlight',
         helper: 'original',
         dropOnEmpty: true,
         forcePlaceholderSize: true,
         forceHelperSize: false,
         receive: function (evt, ui) {
            initReferences();
            initObjects();
         }
     }).disableSelection();

     //If an object is dropped in the policy rule, then hide the default "ANY" object on that rule.
     function hideANYobject(o) {
        var anyObj = $(o).find('#' + '<%= objANY %>');
        if (typeof anyObj == 'undefined') return;
        anyObj.parent().hide();
     }

     function initReferences() {
         $('#ruleList .references').sortable('destroy');
         $('#ruleList .references').sortable({
            items: '.object',
            placeholder: 'placeholder-highlight',
            helper: 'original',
            dropOnEmpty: true,
            forcePlaceholderSize: true,
            forceHelperSize: false,
            receive: function (evt, ui) { bDirty = true; hideANYobject(evt.target); },
         }).disableSelection();
     }


     function initObjects() {
         $('#accordion .object').draggable('destroy');
         $('#accordion .object').draggable({
            helper: 'clone',
            appendTo: 'body',
            zIndex: 350,
            connectToSortable: '.rule .references'
         }).disableSelection();
     }

     //ContextMenu for objects on the left pane
     $('.objBtn').live('mousedown', function(e, ui) {
         //e.which: 1 == left mouse btn and 3 == right mouse button
         if (e.which != 3) { return; } //Handle only right-button clicks...
         
         //Is this object part of a policy rule? If so, it is just a object reference.
         var isObjRef = ($(this).closest('.rule').length == 0) ? false : true;
         
         if (isObjRef == true) {
            $(this).contextMenu('objectRefMenu', {
                /* context menus are to be displayed only for non-ANY objects */
                bindings: {
                   'qualify': function(o) { if ($(o).attr('id') != '<%= objANY %>' ) return qualifyObject(o) } ,
                   'delete': function (o) { if ($(o).attr('id') != '<%= objANY %>' ) return deleteObject(o, isObjRef) }
                },

                itemStyle: {
                   fontSize: '12px',
                   fontFamily: 'Trebuchet MS, Arial',
                   padding: '2px 2px 2px 10px',
                   cursor: 'context-menu',
                   shadow: true
                }
            });

         } else { //It is a policy object
            $(this).contextMenu('objectMenu', {
                bindings: {
                   'edit': function(o) { return editObject(o, oldObject) } ,
                   'delete': function (o) { return deleteObject(o, isObjRef) }
                },

                itemStyle: {
                   fontSize: '12px',
                   fontFamily: 'Trebuchet MS, Arial',
                   padding: '2px 2px 2px 10px',
                   cursor: 'context-menu',
                   shadow: true
                }
            });
         }            

     });

     //Adding new objects
     function newObject(id, elem, parent) {
        //If there is no text, then force the user to enter it since it is mandatory to have a value for the object
        if (elem.val().length == 0) return null;

        var newItem = $('#objectTemplate').clone(true),
            newObj = $('.objBtn', newItem);

        newItem.removeAttr('id'); //remove #objectTemplate from the clone.
        newObj.append(" " + elem.val());

        if (id == null) {
           newObj.attr('id', 'obj_' + Date.now()); //Set a unique id for the new object; 
           parent.append(newItem);
        } else {
           newObj.attr('id', id);
           parent.replaceWith(newItem);
        }
        newItem.show(); 
        initObjects();     
        bDirty = true;

        return newItem;
     }

     /* 
      * Unhide the edit field to let the user enter the text for the new object being created.
      */
     $('#accordion .new-object-btn').live('click', function() {
         $('#accordion .new-object-input-fld').show().focus();
         $('#accordion .object').enableSelection();
     });

     $('#accordion .new-object-input-fld').live('blur', function(event) {
         $('#accordion .new-object-input-fld').hide();
         $('#accordion .object').enableSelection();
     });

     $('#accordion .new-object-input-fld').live('keyup', function(event) {
         if (event.which != 13) return; //Handle only ENTER key
       
         if (newObject(null, $(this), $(this).parent().find('.objects')) == null) return;

         //Clear the edit field and hide it
         $(this).val('').hide();
     });

     //EDITing existing objects

     function moveCursorToEnd(el) {
         if (typeof el.selectionStart == "number") {
            el.selectionStart = el.selectionEnd = el.value.length;
         } else if (typeof el.createTextRange != "undefined") {
            el.focus();
            var range = el.createTextRange();
            range.collapse(false);
            range.select();
         }
     }

     //When EDIT menu option is clicked, replace the object with an Edit field, filled in with existing value.
     function editObject(t, oldObject) {
         var obj = $(t);
         oldObject.id = obj.attr('id') || 'obj_' + Date.now(); //If there is no id, then generate one
         oldObject.text = obj.text();

         $('#accordion .object').enableSelection();
         obj.replaceWith('<input id="valueEditor" class="success" value="'+obj.text()+'"  type="text">').width(obj.width());
         $('#valueEditor').focus();
         moveCursorToEnd($('#valueEditor').get(0));

     }


     /* Save the edited value by adding a new object. This new object also deletes the Edit field, which was
      * transient to let the user modify the object's value.
      */
     $('#valueEditor').live('keyup', oldObject, function(event) {
        if (event.which != 13) return; //handle only ENTER key

        if (newObject(oldObject.id, $(this), $(this).parent()) == null) return;

        oldObject.text = $(this).val();

         //Modify the object references in source/destination of the policy rules
         var objID = oldObject.id;
         var re = /(<i.*>\s*)(.*)/; //retain the icon, while replacing the label
         $('#ruleList .rule').each(function() {
             $('.references .objBtn', this).each(function() {
                 if ($(this).attr('id') == objID) {
                    var replaceText = $(this).html().replace(re, "$1"+oldObject.text);
                    $(this).html(replaceText);
                 }
             });
         });

     });

     /* In case the user clicks anywhere on the screen after entering the edit mode (without hitting the ENTER key), then discard the 
      * the changes and bring back the old object in full glory.
      */
     $('#valueEditor').live('blur', oldObject, function(event) {
        var newItem = $('#objectTemplate').clone(true),
            newObj = $('.objBtn', newItem);
        newItem.removeAttr('id'); //remove #objectTemplate from the clone.
        newObj.attr('id', oldObject.id); 
        newObj.append(" " + oldObject.text);
        $(this).val('').hide();
        $(this).replaceWith(newItem);
        newItem.show();
        $('#accordion .object').enableSelection();
     });

     //Delete the selected object
     function deleteObject(o, isObjRef) {
         var obj = $(o);
         bDirty = true; 

         if (isObjRef == true) {

            //"ANY" default reference should be added, if there are no more references.
            if (obj.closest('.references').find('li:visible').length == 1) {
                obj.closest('.references').find('li').show(); //making the hidden "ANY" visible.
            }
            //This is just a reference in a policy rule, so just delete this instance.
            obj.closest('li').remove();

            return;
         }

         //Remove the object references in source/destination of the policy rules
         var objID = obj.attr('id');
         $('#ruleList .rule').each(function() {
             $('.references .objBtn', this).each(function() {
                 if ($(this).attr('id') == objID) {
                     deleteObject($(this), true);
                 }
             });
         });

         obj.closest('li').remove();
     }

     // This function will add boolean operators - NOT, greater/lesser than etc on the selected object
     function qualifyObject(o) {
         var obj = $(o);

         if (obj.find('b').text().indexOf('NOT') > 0) {
            obj.find('b').remove();
         } else {
            obj.find('i').after('<b style="font-size:1.25em"> NOT </b>');
            //obj.prepend('<b style="font-size:1.25em"> NOT </b>');
         }
         
         bDirty = true;
     }

     //Functions for manipulating policy rules and its objects.

     //ALLOW/DENY the policy rule...
     $('.accessToggler').live('click', function() {
         $(this).find('h3').toggle();
         bDirty = true;
     });

     //Should the policy rule be logged when passed or not.
     $('.loggingToggler').live('click', function() {
         $(this).find('img').toggle();
         bDirty = true;
     });

     //Delete the selected policy rule
     $('.rule .icon-close').live('click', function() {
         var $deleteRule = $(this).closest('.rule');
         $deleteRule.remove();

         /*
          * There should be at least one rule in the policy. 
          * if after deletion, there is none then add the default rule
          */
         if ($('#ruleList .rule').length == 0) {
            $('#newRuleBtn').click();
         }

         bDirty = true;
     });

     //Add a new rule
     $('#newRuleBtn').click(function() {
         var newRule = $('#ruleTemplate').clone(true);
         newRule.attr('id', 'Rule_' + Date.now());
         //Insert the new rule as the first one, just after the HEADER row
         $('#ruleList').prepend(newRule);
         newRule.show();

         initReferences();

         bDirty = true;
     });


     //Save the policy
     /*
      * Parse the HTML page and create the policy JSON
      */

     function getObjectsInRule(list) {
         return $('li.object > .objBtn:visible', list).map(function(k, v) {
            var objRef = $(this).attr("id");
            var value = $(this).text().trim() || "";
           
            return { ref: objRef, negation: ((value.indexOf("NOT ") !== -1) ? "true" : "false") }

         }).get();
     }

     $('form a[type=submit]').click( function() {

        //
        // Save only if the user has changed something
        //
        if (bDirty == false) {
           noty({text: 'No changes done.'});
           return;
        }

        noty({text: 'Save policy file: <%= Rails.configuration.peregrine_policyfile %>?',
              timeout: 0,
              type: 'information',
              modal: true,
              buttons: [
                   {text: 'Ok', click: function($noty) { $noty.close(); savePolicy(); } },
                   {text: 'Cancel', click: function($noty) { $noty.close(); } }
              ]
        });
     });

     function savePolicy() {
        /*
         * Save the modified policy...
         */
        bDirty = false;

        var objectsArray = new Array();
        objectsArray.push({id: '<%= objANY %>', type: 'any', value: 'any'}); //Default object - ANY

        $('#accordion h3').each(function() {
           var objCategory = $(this).attr('class').split(" ").shift();
           var $div = $(this).next();

           $('.object > .objBtn', $div).each(function() {
               var valueText = $(this).text().trim() || "";
               if ((objCategory == "ipv4") && (valueText.indexOf(",") > 0)) {
                   valueText = valueText.replace(/\s*,\s*/g, " or ");
                   objType = "ipv4list";
               } else if ((objCategory == "portrange") && (valueText.indexOf(",") > 0)) {
                   objType = "portlist"
               } else {
                   objType = objCategory
               }


               var obj = {
                           id: $(this).attr('id').trim(),
                           type: objType,
                           value: valueText
               };

               objectsArray.push(obj);
           });
        });

        var policy_rules = $('#ruleList .rule').map(function(key, value) {
           return {
                    position: ++key,
                    id: $(this).attr('id').trim(),
                    sources: getObjectsInRule($('.sources.references', this)),
                    destinations: getObjectsInRule($('.destinations.references', this)),
                    action: $('.accessToggler h3:visible', this).html(),
                    log:  ($('.loggingToggler img:visible', this).attr('class').indexOf('icon-check') !== -1) ? "true" : "false"
                 }
        }).get();

        var policy = {objects: objectsArray, rules: policy_rules};
        $('#policy_json').val(JSON.stringify(policy));;
        $('#policyForm').submit();
     }

     function featureTour() {
        var intro = introJs();
          intro.setOptions({
            steps: [
              {
                element: '#splitterContainer',
                intro: "Policy Editor features tour...",
                position: 'left'
              },
              {
                element: '#accordion',
                intro: "Source/Destination object list. These could be dragged over to the policy rules on the right. <br><br><br><br> ",
                position: 'right'
              },
              {
                element: ('<%= @fwObjects.empty? %>' == 'true') ? '#accordion h3' : '#'+$('#accordion .objBtn:visible').first().attr('id'),
                intro: "<b>Edit/Delete</b> this object with a right click. Rules having this object will also be updated to reflect the change. <br><br>\n\
                        New objects can be created using the <button class='btn btn-mini btn-primary'><i class='icon-plus icon-white'></i></button><br><br><br><br>",
                position: 'bottom'
              },              
              {
                element: '#rightPane',
                intro: "List of all policy rules. Each rule can have more than one source/destination. <br><br>Default source/destination is ANY. <br><br><br><br>",
                position: 'left'
              },
              {
                element: '#' + $('#ruleList  .rule:visible').first().attr('id'),
                intro: " - Drag the pin <i class='icon icon-pin'></i> to move the rule up/down the list. <br><br>\n\
                         - Objects from the left pane can be dragged and dropped onto the Source/Destination. \n\
                           Right click on the dropped objects to delete them. <br><br>\n\
                           You can also set <b> NOT </b> to mean any object that does not equal to this object's value.<br><br>\n\
                         - Action is a toggle changing between <b> ALLOW </b> and <b> DENY </b>. <br><br>\n\
                         - You can log the instance when this rule matches for auditing/troubleshooting. <br><br>\n\
                         - Delete the rule, if not needed. <i> There has to be at least one rule in the policy. </i> <br><br><br><br>",
                position: 'bottom'
              },              
              {
                element: '#newRuleBtn',
                intro: "Clicking this will add a new <i>default</i> rule to the top of the list. You can then change it to suit your needs. <br><br><br><br>",
                position: 'bottom'
              },              
              {
                element: '#saveBtn',
                intro: "Policy will saved and enforced when this button is clicked. <br><br><br><br>",
                position: 'left'
              }, 
              {
                element: '#leftPane',
                intro: "Click on this vertical column (aka splitter) to hide the objects list. <br><br><br><br>",
                position: 'right'
              },
             
            ]
          });

          intro.start();
     }

     $('#helpBtn').click( function(){
        featureTour();
     });

     //Initialization routines
     initObjects();
     initReferences();
     $('#splitterContainer').layout();
     $('#accordion').accordion({ icons: null, autoHeight: false });

  }); /* document.ready() */

  </script>
