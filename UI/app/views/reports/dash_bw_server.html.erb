<%

# Selecting the top 10 ports to display in the bandwidth line graph
hashGraphTimeBasedTotals = Hash[@hashTimeIntervalData.sort_by {|key, value| value.reduce(:+)}.reverse[0..10]]

# Move the hashmap values (in circular fashion) so that the current time 
# is always the last one on the rightmost edge of the graph
currentTime = Time.now.strftime("%H").to_i 
hashGraphTimeBasedTotals.each do |i, arrayTotals|
   arrayTotals.map! {|e| e/$BW_MEASURE}
#  arrayTotals.rotate!(currentTime)
end

# Ports (sorted in descending order of Total bytes) for the dataTable
hashPorts = Hash[@hashPortTotals.sort_by {|key, value| value.reduce(:+)}.reverse]
# Devices (sorted in descending order of Total bytes) for the dataTable
hashDevices = Hash[@hashDeviceTotals.sort_by {|key, value| value.reduce(:+)}.reverse]
%>

<!-- content starts -->
<div id="content" class="span10">
   <div class="row-fluid sortable">		
      <div class="box span12">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Bandwidth Consumption for #{params[:server_ip]} (Today)",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <canvas id="total_bw">[No canvas support]</canvas>
         </div>
      </div> <!-- box span12 -->
   </div><!-- row-fluid sortable -->

   <div class="row-fluid sorttable">
      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Top Ports",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	          <tr>
	             <th>Ports</th>
               <th><%= "Incoming #{bandwidth_label} " %></th>
               <th><%= "Outgoing #{bandwidth_label} " %></th>
               <th><%= "Total    #{bandwidth_label} " %></th>
	          </tr>
	       </thead>   
	       <tbody>
               <% hashPorts.each do | port, arrayTotals | %>
                     <tr>
                        <td><%= port %></td>
                        <td><%= sprintf("%.2f", arrayTotals[0]/$BW_MEASURE) %></td>
                        <td><%= sprintf("%.2f", arrayTotals[1]/$BW_MEASURE) %></td>
                        <td><%= sprintf("%.2f", arrayTotals.reduce(:+)/$BW_MEASURE) %></td>
                     </tr>
               <% end %>
               
               </tbody>
            </table>
         </div> <!-- box-content -->
      </div> <!-- box span6 -->

      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Top Devices",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	                <tr>
	                   <th>Device</th>
                     <th><%= "Incoming #{bandwidth_label} " %></th>
                     <th><%= "Outgoing #{bandwidth_label} " %></th>
                     <th><%= "Total    #{bandwidth_label} " %></th>	                
                  </tr>
	             </thead>   
	             <tbody>
               <% hashDevices.each do | device, arrayTotals | %>                     
                  <tr>
                     <td><%= link_to device,  :action => "device_details", :device => device %></td>
                     <td><%= sprintf("%.2f", arrayTotals[0]/$BW_MEASURE) %></td>
                     <td><%= sprintf("%.2f", arrayTotals[1]/$BW_MEASURE) %></td>
                     <td><%= sprintf("%.2f", arrayTotals.reduce(:+)/$BW_MEASURE) %></td>
                  </tr>
               <% end %>
               </tbody>
            </table>
            </div> <!-- box-content -->
         </div> <!-- box span6 -->
   </div><!-- row-fluid sortable -->
</div><!-- content ends -->


<script type="text/javascript">
        
        Array.max = function( array ){
            return Math.max.apply( Math, array );
        };

        window.onload = function ()
        {
            //Resize the canvas element
            document.body.onresize = function () {
              var canvas = document.getElementById('total_bw');
              canvas.width = canvas.parentNode.clientWidth * 0.9;
              canvas.height = canvas.parentNode.clientHeight * 1.5;
            }

            document.body.onresize();
            var myLine = new RGraph.Line('total_bw', <%= hashGraphTimeBasedTotals.values %>);
            myLine.Set('labels', <%=raw graphLabels24Hrs.map { |i| i.to_s } %>);

            myLine.Set('key', <%=raw hashGraphTimeBasedTotals.keys.map {|i| i.to_s} %>);
            myLine.Set('key.color.shape', 'circle');
            myLine.Set('key.position', 'graph');

            myLine.Set('linewidth', 5);
            myLine.Set('background.grid.autofit.numvlines', 24);
            myLine.Set('background.grid.autofit.numhlines', 10);

            myLine.Set('colors', ['red', 'black','#DDDF0D','#7798BF', '#ABD874', '#E18D87', '#599FD9', '#F4AD7C', '#D5BBE5']);
            myLine.Set('text.color', '#333');
            myLine.Set('text.font', 'Arial');
            myLine.Set('background.grid.autofit', true);
            myLine.Set('shadow', true);
            myLine.Set('shadow.color', 'rgba(20,20,20,0.3)');
            myLine.Set('shadow.blur',  10);
            myLine.Set('shadow.offsetx', 0);
            myLine.Set('shadow.offsety', 0);
            myLine.Set('background.grid.border', true);
            myLine.Set('axis.color', '#666');
            myLine.Set('text.color', '#666');
            myLine.Set('key.interactive', true);
            myLine.Set('spline', true);
            myLine.Set('title', '<%= "Bandwidth #{bandwidth_label}" %>');
            myLine.Set('gutter.left', 70);
            //myLine.Set('tickmarks', 'circle');


            /**
            * Use the Trace animation to show the chart
            */
            if (RGraph.isOld() || (Array.max(myLine.data_arr) < 5)) {
                // IE7/8 don't support shadow blur, so set custom shadow properties
                myLine.Set('shadow.offsetx', 3);
                myLine.Set('shadow.offsety', 3);
                myLine.Set('shadow.color', '#aaa');
                myLine.Draw();
            } else {
                RGraph.Effects.Line.jQuery.UnfoldFromCenterTrace(myLine, {'duration': 1000});
            }
        }
</script>

